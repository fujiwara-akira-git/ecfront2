import { PrismaClient } from '@prisma/client'
import bcryptjs from 'bcryptjs'

const prisma = new PrismaClient()

async function main() {
  console.log('üå± ÈñãÂßã: „Éá„Éº„Çø„Éô„Éº„Çπ„Å´„ÉÜ„Çπ„Éà„Éá„Éº„Çø„Çí„Ç∑„Éº„Éâ')

  // „Ç´„ÉÜ„Ç¥„É™„ÅÆ‰ΩúÊàê
  const categories = [
    { name: 'ÈáéËèú', description: 'Êñ∞ÈÆÆ„Å™ÈáéËèúÈ°û' },
    { name: '„Çª„ÉÉ„ÉàÂïÜÂìÅ', description: 'ÈáéËèú„Çª„ÉÉ„Éà„ÇÑË©∞„ÇÅÂêà„Çè„ÅõÂïÜÂìÅ' },
    { name: 'ÊûúÁâ©', description: 'Â≠£ÁØÄ„ÅÆÊûúÁâ©' },
  ]

  const createdCategories: any[] = []
  for (const category of categories) {
    const created = await prisma.category.upsert({
      where: { name: category.name },
      update: category,
      create: category,
    })
    createdCategories.push(created)
    console.log(`üìÅ „Ç´„ÉÜ„Ç¥„É™‰ΩúÊàê: ${created.name}`)
  }

  // ÁîüÁî£ËÄÖ„ÅÆ‰ΩúÊàê
  const producers = [
    { 
      name: 'Áî∞‰∏≠Ëæ≤Âúí', 
      description: 'ÊúâÊ©üÈáéËèúÊ†ΩÂüπ„ÅÆ„Éë„Ç§„Ç™„Éã„Ç¢',
      address: 'ÂüºÁéâÁúåÂ∑ùÁî∞Ë∞∑123-4',
      phone: '048-123-0001',
      email: 'tanaka@farm.com'
    },
    { 
      name: 'Èà¥Êú®Ëæ≤Â†¥', 
      description: '„Éà„Éû„ÉàÂ∞ÇÈñÄËæ≤Â†¥',
      address: 'ÂüºÁéâÁúåÂ∑ùÁî∞Ë∞∑234-5',
      phone: '048-123-0002',
      email: 'suzuki@farm.com'
    },
    { 
      name: '‰ΩêËó§„Éï„Ç°„Éº„É†', 
      description: 'Ê†πËèúÈ°ûÂ∞ÇÈñÄ',
      address: 'ÂüºÁéâÁúåÂ∑ùÁî∞Ë∞∑345-6',
      phone: '048-123-0003',
      email: 'sato@farm.com'
    },
    { 
      name: 'Â±±Áî∞ÈáéËèúÂúí', 
      description: 'Â§öÂìÅÁ®ÆÊ†ΩÂüπËæ≤Âúí',
      address: 'ÂüºÁéâÁúåÂ∑ùÁî∞Ë∞∑456-7',
      phone: '048-123-0004',
      email: 'yamada@farm.com'
    },
    { 
      name: 'Eagle PalaceËæ≤Âúí', 
      description: 'Ëæ≤ÂúíÁõ¥Âñ∂Â∫ó',
      address: 'ÂüºÁéâÁúåÂ∑ùÁî∞Ë∞∑1234-5',
      phone: '048-123-4567',
      email: 'info@eaglepalace.com'
    },
  ]

  const createdProducers: any[] = []
  for (const producer of producers) {
    const created = await prisma.producer.upsert({
      where: { name: producer.name },
      update: producer,
      create: producer,
    })
    createdProducers.push(created)
    console.log(`üë®‚Äçüåæ ÁîüÁî£ËÄÖ‰ΩúÊàê: ${created.name}`)
  }

  // ÂïÜÂìÅ„ÅÆ‰ΩúÊàê
  const vegetableCategory = createdCategories.find(c => c.name === 'ÈáéËèú')!
  const setCategory = createdCategories.find(c => c.name === '„Çª„ÉÉ„ÉàÂïÜÂìÅ')!

  const products = [
    {
      name: 'Êúù„Å©„ÇäÊñ∞ÈÆÆ„É¨„Çø„Çπ',
      description: 'ÊúùÊé°„Çå„ÅÆÊñ∞ÈÆÆ„Å™„É¨„Çø„Çπ„ÄÇ„Ç∑„É£„Ç≠„Ç∑„É£„Ç≠„ÅÆÈ£üÊÑü„Å®Áîò„Åø„ÅåÁâπÂæ¥„Åß„Åô„ÄÇ',
      price: 280,
      image: 'ü•¨',
      categoryId: vegetableCategory.id,
      producerId: createdProducers.find(p => p.name === 'Áî∞‰∏≠Ëæ≤Âúí')!.id,
      inventory: { quantity: 50, minStock: 10, maxStock: 100 }
    },
    {
      name: 'ÂÆåÁÜü„Éà„Éû„Éà',
      description: 'ÂÆåÁÜü„Åó„ÅüÁîò„ÅÑ„Éà„Éû„Éà„ÄÇÊ†ÑÈ§ä‰æ°„ÅåÈ´ò„Åè„ÄÅÊñôÁêÜ„Å´„ÇÇÊúÄÈÅ©„Åß„Åô„ÄÇ',
      price: 450,
      image: 'üçÖ',
      categoryId: vegetableCategory.id,
      producerId: createdProducers.find(p => p.name === 'Èà¥Êú®Ëæ≤Â†¥')!.id,
      inventory: { quantity: 30, minStock: 5, maxStock: 80 }
    },
    {
      name: 'Áîò„ÅÑ‰∫∫ÂèÇ',
      description: 'Áîò„Åè„Å¶Ê†ÑÈ§ä„Åü„Å£„Å∑„Çä„ÅÆ‰∫∫ÂèÇ„ÄÇŒ≤„Ç´„É≠„ÉÜ„É≥„ÅåË±äÂØå„ÅßÂÅ•Â∫∑„Å´ËâØ„ÅÑ„Åß„Åô„ÄÇ',
      price: 320,
      image: 'ü•ï',
      categoryId: vegetableCategory.id,
      producerId: createdProducers.find(p => p.name === '‰ΩêËó§„Éï„Ç°„Éº„É†')!.id,
      inventory: { quantity: 40, minStock: 8, maxStock: 90 }
    },
    {
      name: 'Êó¨„ÅÆ„Åç„ÇÖ„ÅÜ„Çä',
      description: '„Ç∑„É£„Ç≠„Ç∑„É£„Ç≠„ÅÆÊñ∞ÈÆÆ„Åç„ÇÖ„ÅÜ„Çä„ÄÇ„Åø„Åö„Åø„Åö„Åó„Åè„Å¶„Åï„Å£„Å±„Çä„Å®„Åó„ÅüÂë≥„Çè„ÅÑ„Åß„Åô„ÄÇ',
      price: 200,
      image: 'ü•í',
      categoryId: vegetableCategory.id,
      producerId: createdProducers.find(p => p.name === 'Â±±Áî∞ÈáéËèúÂúí')!.id,
      inventory: { quantity: 60, minStock: 15, maxStock: 120 }
    },
    {
      name: '‰ªäÊó•„ÅÆÁâπÈÅ∏ÈáéËèú„Çª„ÉÉ„Éà',
      description: 'ÊúùÊé°„ÇåÊñ∞ÈÆÆÈáéËèú„ÅÆË©∞„ÇÅÂêà„Çè„Åõ„ÄÇÂ≠£ÁØÄ„ÅÆÊó¨„Å™ÈáéËèú„ÇíÂé≥ÈÅ∏„Åó„Å¶„ÅäÂ±ä„Åë„Åó„Åæ„Åô„ÄÇ',
      price: 1200,
      image: 'ü•ïü•¨üçÖ',
      categoryId: setCategory.id,
      producerId: createdProducers.find(p => p.name === 'Eagle PalaceËæ≤Âúí')!.id,
      inventory: { quantity: 20, minStock: 3, maxStock: 50 }
    }
  ]

  const createdProducts: any[] = []
  for (const productData of products) {
    const { inventory, ...product } = productData
    
    const created = await prisma.product.create({
      data: {
        ...product,
        inventory: {
          create: inventory
        }
      },
      include: {
        category: true,
        producer: true,
        inventory: true
      }
    })
    createdProducts.push(created)
    console.log(`ü•¨ ÂïÜÂìÅ‰ΩúÊàê: ${created.name} (Âú®Â∫´: ${created.inventory?.quantity}ÂÄã)`)
  }

  // „ÉÜ„Çπ„Éà„É¶„Éº„Ç∂„Éº„ÅÆ‰ΩúÊàê
  const testUsers = [
    {
      email: process.env.TEST_CUSTOMER_EMAIL || 'customer@example.com',
      password: await bcryptjs.hash(process.env.TEST_CUSTOMER_PASSWORD || 'defaultpassword', 10),
      name: '„ÉÜ„Çπ„ÉàÈ°ßÂÆ¢',
      phone: '090-1234-5678',
      address: 'Êù±‰∫¨ÈÉΩÊ∏ãË∞∑Âå∫1-1-1',
      userType: 'customer'
    },
    {
      email: process.env.TEST_ADMIN_EMAIL || 'admin@example.com',
      password: await bcryptjs.hash(process.env.TEST_ADMIN_PASSWORD || 'defaultpassword', 10),
      name: 'ÁÆ°ÁêÜËÄÖ',
      phone: '090-9876-5432',
      address: 'ÂüºÁéâÁúåÂ∑ùÁî∞Ë∞∑1234-5',
      userType: 'admin'
    }
  ]

  const createdUsers: any[] = []
  for (const userData of testUsers) {
    const created = await prisma.user.upsert({
      where: { email: userData.email },
      update: userData,
      create: userData,
    })
    createdUsers.push(created)
    console.log(`üë§ „É¶„Éº„Ç∂„Éº‰ΩúÊàê: ${created.name} (${created.email})`)
  }

  // „Çµ„É≥„Éó„É´Ê≥®Êñá„ÅÆ‰ΩúÊàê
  const testCustomer = createdUsers.find(u => u.userType === 'customer')!
  const lettuce = createdProducts.find(p => p.name === 'Êúù„Å©„ÇäÊñ∞ÈÆÆ„É¨„Çø„Çπ')!
  const tomato = createdProducts.find(p => p.name === 'ÂÆåÁÜü„Éà„Éû„Éà')!

  const sampleOrder = await prisma.order.create({
    data: {
      userId: testCustomer.id,
      customerName: testCustomer.name!,
      customerEmail: testCustomer.email!,
      customerPhone: testCustomer.phone!,
      shippingAddress: testCustomer.address!,
      status: 'delivered',
      subtotal: 1010,
      shippingFee: 600,
      totalAmount: 1610,
      shippingMethod: 'yamato-standard',
      trackingNumber: 'TEST123456789',
      orderItems: {
        create: [
          {
            productId: lettuce.id,
            quantity: 2,
            unitPrice: lettuce.price,
            totalPrice: lettuce.price * 2
          },
          {
            productId: tomato.id,
            quantity: 1,
            unitPrice: tomato.price,
            totalPrice: tomato.price * 1
          }
        ]
      },
      payments: {
        create: {
          amount: 1610,
          currency: 'jpy',
          status: 'succeeded',
          paymentMethod: 'card',
          stripeId: 'pi_test_123456789'
        }
      }
    },
    include: {
      orderItems: {
        include: {
          product: true
        }
      },
      payments: true
    }
  })

  console.log(`üõí „Çµ„É≥„Éó„É´Ê≥®Êñá‰ΩúÊàê: ${sampleOrder.id} (¬•${sampleOrder.totalAmount})`)

  // Âú®Â∫´„ÇíÊ≥®ÊñáÂàÜÊ∏õ„Çâ„Åô
  await prisma.inventory.update({
    where: { productId: lettuce.id },
    data: { quantity: { decrement: 2 } }
  })
  
  await prisma.inventory.update({
    where: { productId: tomato.id },
    data: { quantity: { decrement: 1 } }
  })

  console.log('‚úÖ „Ç∑„Éº„ÉâÂÆå‰∫Ü: „Åô„Åπ„Å¶„ÅÆ„ÉÜ„Çπ„Éà„Éá„Éº„Çø„Åå‰ΩúÊàê„Åï„Çå„Åæ„Åó„Åü')
  
  // ‰ΩúÊàê„Åï„Çå„Åü„Éá„Éº„Çø„ÅÆÊ¶ÇË¶Å„ÇíË°®Á§∫
  const summary = {
    categories: await prisma.category.count(),
    producers: await prisma.producer.count(),
    products: await prisma.product.count(),
    users: await prisma.user.count(),
    orders: await prisma.order.count(),
  }
  
  console.log('üìä „Éá„Éº„Çø„Éô„Éº„ÇπÊ¶ÇË¶Å:', summary)
}

main()
  .then(async () => {
    await prisma.$disconnect()
  })
  .catch(async (e) => {
    console.error('‚ùå „Ç∑„Éº„Éâ„Ç®„É©„Éº:', e)
    await prisma.$disconnect()
    process.exit(1)
  })